{"config": {"indexing": "full", "lang": ["en"], "min_search_length": 3, "prebuild_index": false, "separator": "[\\s\\-]+"}, "docs": [{"location": "", "text": "Element Event \u00b6 DataJoint Element for session related Event Management. DataJoint Elements collectively standardize and automate data collection and analysis for neuroscience experiments. Each Element is a modular pipeline for data storage and processing with corresponding database tables that can be combined with other Elements to assemble a fully functional pipeline. Element Event features a DataJoint pipeline allowing for a standard approach for session level organization. The Element is composed of two schemas for storing data: event - Manages event related data storage trial - Manages trial related data storage Visit the Concepts page for more information on session management and Element Session. To get started with building your data pipeline visit the Tutorials page .", "title": "Element Event"}, {"location": "#element-event", "text": "DataJoint Element for session related Event Management. DataJoint Elements collectively standardize and automate data collection and analysis for neuroscience experiments. Each Element is a modular pipeline for data storage and processing with corresponding database tables that can be combined with other Elements to assemble a fully functional pipeline. Element Event features a DataJoint pipeline allowing for a standard approach for session level organization. The Element is composed of two schemas for storing data: event - Manages event related data storage trial - Manages trial related data storage Visit the Concepts page for more information on session management and Element Session. To get started with building your data pipeline visit the Tutorials page .", "title": "Element Event"}, {"location": "changelog/", "text": "Changelog \u00b6 Observes Semantic Versioning standard and Keep a Changelog convention. 0.1.3 - 2022-11-02 \u00b6 Added - mkdocs deployment 0.1.2 - 2022-08-26 \u00b6 Added - attribute_blob as longblob in the Attribute tables Added - support storing non-string data types 0.1.1 - 2022-06-10 \u00b6 Added - NotImplementedError where Imported tables do not offer make function Added - get_trialized_alignment_event_times docstring specificity Changed - Diagram to reflect design with trial.BlockTrial as imported 0.1.0 - 2022-05-10 \u00b6 Added - Draft based on Cajal and Kavli Institute precursor projects Added - Table architecture Added - AlignmentEvent design to capture windows relative to an event Added - Black formatting into code base", "title": "Changelog"}, {"location": "changelog/#changelog", "text": "Observes Semantic Versioning standard and Keep a Changelog convention.", "title": "Changelog"}, {"location": "changelog/#013-2022-11-02", "text": "Added - mkdocs deployment", "title": "0.1.3 - 2022-11-02"}, {"location": "changelog/#012-2022-08-26", "text": "Added - attribute_blob as longblob in the Attribute tables Added - support storing non-string data types", "title": "0.1.2 - 2022-08-26"}, {"location": "changelog/#011-2022-06-10", "text": "Added - NotImplementedError where Imported tables do not offer make function Added - get_trialized_alignment_event_times docstring specificity Changed - Diagram to reflect design with trial.BlockTrial as imported", "title": "0.1.1 - 2022-06-10"}, {"location": "changelog/#010-2022-05-10", "text": "Added - Draft based on Cajal and Kavli Institute precursor projects Added - Table architecture Added - AlignmentEvent design to capture windows relative to an event Added - Black formatting into code base", "title": "0.1.0 - 2022-05-10"}, {"location": "citation/", "text": "Citation \u00b6 If your work uses this Element, please cite the following manuscript and Research Resource Identifier (RRID). Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D, Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for Neurophysiology. bioRxiv. 2021 Jan 1. doi: https://doi.org/10.1101/2021.03.30.437358 DataJoint Elements ( RRID:SCR_021894 ) - Element Event (version 0.1.2)", "title": "Citation"}, {"location": "citation/#citation", "text": "If your work uses this Element, please cite the following manuscript and Research Resource Identifier (RRID). Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D, Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for Neurophysiology. bioRxiv. 2021 Jan 1. doi: https://doi.org/10.1101/2021.03.30.437358 DataJoint Elements ( RRID:SCR_021894 ) - Element Event (version 0.1.2)", "title": "Citation"}, {"location": "concepts/", "text": "Concepts \u00b6 User Population \u00b6 Event- & trial-based experiments have an extensive history in behavioral and cognitive psychology. Fundamentally, data collection is carved up in time according to some ontology. Researchers may repeat Trial conditions in some manner to improve statistical power when contrasting a feature of interest versus a neutral baseline. Neuroscientists, in particular, may be interested in the moments before and after an Event to look at neurophysiological factors that predict or are predicted by a subject's behavior. What may differ between research groups is the ontology used to carve up time. Event and Trial Time Locking in Neurophysiology \u00b6 Event-related potentials (ERPs) are a form of measurement associated with electrophysiological neural signal activity. Typical neural signal patterns are continuous recordings lasting for the duration of a recording session. ERPs are short segmented chunks of neural signals that are time locked to particular events of experimental interest. These segmented chunks can then be stored across all occurences of a particular event and then can be averaged across all related trials containing the event type. Typical common events of interest include stimlus or trial onset and motor response onsets(button press, eye movements, lever licks). ERPs can ultimately be used to identify patterns of neural activity associated with the responses to the events of interest. Terminology \u00b6 The language below is tailored to the dependent variable in many neuroscience experiments, behavior. These concepts could be restated in reference to any modality. 1 2 3 4 5 6 7 |----------------------------------------------------------------------------| |-------------------------------- Session ---------------------------------|__ |------------------------------- Recording ------------------------------|____ |----- Block 1 -----|______|----- Block 2 -----|______|----- Block 3 -----|___ | Trial 1 || Trial 2 |____| Trial 3 || Trial 4 |____| Trial 5 |____| Trial 6 | |_|e1|_|e2||e3|_|e4|__|e5|__|e6||e7||e8||e9||e10||e11|____|e12||e13|_________| |----------------------------------------------------------------------------| A Session is period during which data is collected. A Recording is some source of data tied to a single modality (e.g., behavior). This may or may not fully capture the session depending on recording latencies or equipment malfunctions. Block and Trial are non-instantaneous subsets of Session whose traits often repeat across instances. These periods may be combined or contrasted in downstream analyses. Trials may occur within or extend to the intervals between Blocks . An Event (represented with e above) is an optionally instantaneous occurrence during a Session . Projects may differ in their need to record event duration (e.g., onset versus duration of subject behavior) Events may occur during other categories, or during continuously recorded behavior. Key Partnerships \u00b6 DataJoint has partnered with the following teams to interview key members, and develop individualized pipelines. By comparing across use-cases, the DataJoint team has developed a highly adaptable workflow to meet most needs, and trialize analyses within an existing DataJoint workflow. International Brain Lab Mesoscale Activity Project (Janelia Research Campus/Baylor College of Medicine/New York University) Jerry Chen Lab (Boston University) University of Rochester-New York University-Harvard University U19 Columbia University U19 Tobias Rose Lab (University of Bonn) Element Features \u00b6 Features of Element Event include: Pairing of upstream sessions with behavioral recordings Multiple recorded attributes for phases of interest (see Attribute part tables for Block and Trial) Defining Trial and Event Types as lookup tables Optionally activating only the event schema for event-based recording, without Trial and Block phases. An AlignmentEvent table to define the window of interest relative to specific event types. Each level of the hierarchy (Block, Trial, Event) is designed to be optional to suit a given experiment's needs. For example usage, visit our Array Electrophysiology Workflow . Element Architecture \u00b6 Each node in the following diagram represents the analysis code in the workflow for Element Event and corresponding table in the database. Within the workflow, Element Event connects to upstream Element Session. subject schema ( API docs ) \u00b6 Although not required, most choose to connect the Session table to a Subject table. Table Description Subject Basic information of the research subject. session schema ( API docs ) \u00b6 Table Description Session Unique experimental session identifier. event schema ( API docs ) \u00b6 Tables related to event related data storage Table Description EventType Unique event types and descriptions thereof. Behavior Recording Stores information from one recording session. Event Central table for storing all events from recording session. AlignmentEvent Stores events aligned to specific event type. trial schema ( API docs ) \u00b6 Tables related to Session trials. Table Description Block Stores information from custom experimental blocks. TrialType Unique trial types and descriptions thereof. Trial A central table for storing all trials from one recording session. BlockTrial Stores information on trials from experimental blocks. TrialEvent Stores information on trials associated with event type. Element Development \u00b6 In addition to the key projects listed above, the DataJoint team met with leaders from both Neurodata Without Borders and the Kepecs Lab , as these groups have both tackled the difficulty of developing ontologies that can cover all possible iterations of behavioral data collection. Our resulting structure is exemplified by the figure below. Roadmap \u00b6 Further development of this Element is community driven. Upon user requests and based on guidance from the Scientific Steering Group we will add the following features to this Element: Automated import/export from/to common filetypes. Tools for synchronizing to reference clocks.", "title": "Concepts"}, {"location": "concepts/#concepts", "text": "", "title": "Concepts"}, {"location": "concepts/#user-population", "text": "Event- & trial-based experiments have an extensive history in behavioral and cognitive psychology. Fundamentally, data collection is carved up in time according to some ontology. Researchers may repeat Trial conditions in some manner to improve statistical power when contrasting a feature of interest versus a neutral baseline. Neuroscientists, in particular, may be interested in the moments before and after an Event to look at neurophysiological factors that predict or are predicted by a subject's behavior. What may differ between research groups is the ontology used to carve up time.", "title": "User Population"}, {"location": "concepts/#event-and-trial-time-locking-in-neurophysiology", "text": "Event-related potentials (ERPs) are a form of measurement associated with electrophysiological neural signal activity. Typical neural signal patterns are continuous recordings lasting for the duration of a recording session. ERPs are short segmented chunks of neural signals that are time locked to particular events of experimental interest. These segmented chunks can then be stored across all occurences of a particular event and then can be averaged across all related trials containing the event type. Typical common events of interest include stimlus or trial onset and motor response onsets(button press, eye movements, lever licks). ERPs can ultimately be used to identify patterns of neural activity associated with the responses to the events of interest.", "title": "Event and Trial Time Locking in Neurophysiology"}, {"location": "concepts/#terminology", "text": "The language below is tailored to the dependent variable in many neuroscience experiments, behavior. These concepts could be restated in reference to any modality. 1 2 3 4 5 6 7 |----------------------------------------------------------------------------| |-------------------------------- Session ---------------------------------|__ |------------------------------- Recording ------------------------------|____ |----- Block 1 -----|______|----- Block 2 -----|______|----- Block 3 -----|___ | Trial 1 || Trial 2 |____| Trial 3 || Trial 4 |____| Trial 5 |____| Trial 6 | |_|e1|_|e2||e3|_|e4|__|e5|__|e6||e7||e8||e9||e10||e11|____|e12||e13|_________| |----------------------------------------------------------------------------| A Session is period during which data is collected. A Recording is some source of data tied to a single modality (e.g., behavior). This may or may not fully capture the session depending on recording latencies or equipment malfunctions. Block and Trial are non-instantaneous subsets of Session whose traits often repeat across instances. These periods may be combined or contrasted in downstream analyses. Trials may occur within or extend to the intervals between Blocks . An Event (represented with e above) is an optionally instantaneous occurrence during a Session . Projects may differ in their need to record event duration (e.g., onset versus duration of subject behavior) Events may occur during other categories, or during continuously recorded behavior.", "title": "Terminology"}, {"location": "concepts/#key-partnerships", "text": "DataJoint has partnered with the following teams to interview key members, and develop individualized pipelines. By comparing across use-cases, the DataJoint team has developed a highly adaptable workflow to meet most needs, and trialize analyses within an existing DataJoint workflow. International Brain Lab Mesoscale Activity Project (Janelia Research Campus/Baylor College of Medicine/New York University) Jerry Chen Lab (Boston University) University of Rochester-New York University-Harvard University U19 Columbia University U19 Tobias Rose Lab (University of Bonn)", "title": "Key Partnerships"}, {"location": "concepts/#element-features", "text": "Features of Element Event include: Pairing of upstream sessions with behavioral recordings Multiple recorded attributes for phases of interest (see Attribute part tables for Block and Trial) Defining Trial and Event Types as lookup tables Optionally activating only the event schema for event-based recording, without Trial and Block phases. An AlignmentEvent table to define the window of interest relative to specific event types. Each level of the hierarchy (Block, Trial, Event) is designed to be optional to suit a given experiment's needs. For example usage, visit our Array Electrophysiology Workflow .", "title": "Element Features"}, {"location": "concepts/#element-architecture", "text": "Each node in the following diagram represents the analysis code in the workflow for Element Event and corresponding table in the database. Within the workflow, Element Event connects to upstream Element Session.", "title": "Element Architecture"}, {"location": "concepts/#subject-schema-api-docs", "text": "Although not required, most choose to connect the Session table to a Subject table. Table Description Subject Basic information of the research subject.", "title": "subject schema (API docs)"}, {"location": "concepts/#session-schema-api-docs", "text": "Table Description Session Unique experimental session identifier.", "title": "session schema (API docs)"}, {"location": "concepts/#event-schema-api-docs", "text": "Tables related to event related data storage Table Description EventType Unique event types and descriptions thereof. Behavior Recording Stores information from one recording session. Event Central table for storing all events from recording session. AlignmentEvent Stores events aligned to specific event type.", "title": "event schema (API docs)"}, {"location": "concepts/#trial-schema-api-docs", "text": "Tables related to Session trials. Table Description Block Stores information from custom experimental blocks. TrialType Unique trial types and descriptions thereof. Trial A central table for storing all trials from one recording session. BlockTrial Stores information on trials from experimental blocks. TrialEvent Stores information on trials associated with event type.", "title": "trial schema (API docs)"}, {"location": "concepts/#element-development", "text": "In addition to the key projects listed above, the DataJoint team met with leaders from both Neurodata Without Borders and the Kepecs Lab , as these groups have both tackled the difficulty of developing ontologies that can cover all possible iterations of behavioral data collection. Our resulting structure is exemplified by the figure below.", "title": "Element Development"}, {"location": "concepts/#roadmap", "text": "Further development of this Element is community driven. Upon user requests and based on guidance from the Scientific Steering Group we will add the following features to this Element: Automated import/export from/to common filetypes. Tools for synchronizing to reference clocks.", "title": "Roadmap"}, {"location": "tutorials/", "text": "Tutorials \u00b6 Coming soon!", "title": "Tutorials"}, {"location": "tutorials/#tutorials", "text": "Coming soon!", "title": "Tutorials"}, {"location": "api/element_event/event/", "text": "Events are linked to Trials activate ( schema_name , * , create_schema = True , create_tables = True , linking_module = None ) \u00b6 Activate this schema. Parameters: Name Type Description Default schema_name str schema name on the database server required create_schema bool when True (default), create schema in the database if it does not yet exist. True create_tables str when True (default), create schema tables in the database if they do not yet exist. True linking_module str a module (or name) containing the required dependencies. None Dependencies: Upstream tables Session: parent table to BehaviorRecording, identifying a recording session. Project: the project with which experimental sessions are associated Experimenter: the experimenter(s) participating in a given session To supply from element-lab add Experimenter = lab.User to your workflow/pipeline.py before session.activate() Functions get_experiment_root_data_dir(): Retrieve the root data director(y/ies) with behavioral recordings (e.g., bpod files) for all subject/sessions, returns a string for full path to the root data directory. get_session_directory(session_key: dict): Retrieve the session directory containing the recording(s) for a given Session, returns a string for full path to the session directory Source code in element_event/event.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def activate ( schema_name , * , create_schema = True , create_tables = True , linking_module = None ): \"\"\"Activate this schema. Args: schema_name (str): schema name on the database server create_schema (bool): when True (default), create schema in the database if it does not yet exist. create_tables (str): when True (default), create schema tables in the database if they do not yet exist. linking_module (str): a module (or name) containing the required dependencies. Dependencies: Upstream tables: Session: parent table to BehaviorRecording, identifying a recording session. Project: the project with which experimental sessions are associated Experimenter: the experimenter(s) participating in a given session To supply from element-lab add `Experimenter = lab.User` to your `workflow/pipeline.py` before `session.activate()` Functions: get_experiment_root_data_dir(): Retrieve the root data director(y/ies) with behavioral recordings (e.g., bpod files) for all subject/sessions, returns a string for full path to the root data directory. get_session_directory(session_key: dict): Retrieve the session directory containing the recording(s) for a given Session, returns a string for full path to the session directory \"\"\" if isinstance ( linking_module , str ): linking_module = importlib . import_module ( linking_module ) assert inspect . ismodule ( linking_module ), ( \"The argument 'dependency' must\" + \" be a module or module name\" ) schema . activate ( schema_name , create_schema = create_schema , create_tables = create_tables , add_objects = linking_module . __dict__ , ) get_experiment_root_data_dir () \u00b6 Pulls relevant func from parent namespace to specify root data dir(s). It is recommended that all paths in DataJoint Elements stored as relative paths, with respect to some user-configured \"root\" director(y/ies). The root(s) may vary between data modalities and user machines. Returns a full path string to behavioral root data directory or list of strings for possible root data directories. Returns: Name Type Description Paths list List of path(s) to root directories for event data Source code in element_event/event.py 60 61 62 63 64 65 66 67 68 69 70 71 72 def get_experiment_root_data_dir () -> list : \"\"\"Pulls relevant func from parent namespace to specify root data dir(s). It is recommended that all paths in DataJoint Elements stored as relative paths, with respect to some user-configured \"root\" director(y/ies). The root(s) may vary between data modalities and user machines. Returns a full path string to behavioral root data directory or list of strings for possible root data directories. Returns: Paths (list): List of path(s) to root directories for event data \"\"\" return _linking_module . get_experiment_root_data_dir () get_session_directory ( session_key ) \u00b6 Pulls relative function from parent namespace. Retrieves the session directory containing the recorded data for a given Session. Returns a string for full path to the session directory. Returns: Name Type Description Session_dir str Relative path to session directory Source code in element_event/event.py 75 76 77 78 79 80 81 82 83 84 85 def get_session_directory ( session_key : dict ) -> str : \"\"\"Pulls relative function from parent namespace. Retrieves the session directory containing the recorded data for a given Session. Returns a string for full path to the session directory. Returns: Session_dir (str): Relative path to session directory \"\"\" return _linking_module . get_session_directory ( session_key ) EventType \u00b6 Bases: dj . Lookup Set of unique events present within a recording session Attributes: Name Type Description event_type varchar(16) Unique event type. event_type_description varchar(256) Event type description. Source code in element_event/event.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 @schema class EventType ( dj . Lookup ): \"\"\"Set of unique events present within a recording session Attributes: event_type ( varchar(16) ): Unique event type. event_type_description ( varchar(256) ): Event type description. \"\"\" definition = \"\"\" event_type : varchar(16) --- event_type_description='' : varchar(256) \"\"\" BehaviorRecording \u00b6 Bases: dj . Manual Behavior Recordings Attributes: Name Type Description Session foreign key Session primary key. recording_start_time datetime Start time of recording. recording_duration float Duration of recording. recording_notes varchar(256) Optional recording related notes. Source code in element_event/event.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 @schema class BehaviorRecording ( dj . Manual ): \"\"\"Behavior Recordings Attributes: Session (foreign key): Session primary key. recording_start_time (datetime): Start time of recording. recording_duration (float): Duration of recording. recording_notes ( varchar(256) ): Optional recording related notes. \"\"\" definition = \"\"\" -> Session --- recording_start_time=null : datetime recording_duration=null : float recording_notes='' : varchar(256) \"\"\" class File ( dj . Part ): \"\"\"File IDs and paths associated with a behavior recording Attributes: BehaviorRecording (foreign key): Behavior recording primary key. filepath ( varchar(64) ): file path of video, relative to root data dir. \"\"\" definition = \"\"\" -> master filepath : varchar(64) \"\"\" File \u00b6 Bases: dj . Part File IDs and paths associated with a behavior recording Attributes: Name Type Description BehaviorRecording foreign key Behavior recording primary key. filepath varchar(64) file path of video, relative to root data dir. Source code in element_event/event.py 126 127 128 129 130 131 132 133 134 135 136 137 class File ( dj . Part ): \"\"\"File IDs and paths associated with a behavior recording Attributes: BehaviorRecording (foreign key): Behavior recording primary key. filepath ( varchar(64) ): file path of video, relative to root data dir. \"\"\" definition = \"\"\" -> master filepath : varchar(64) \"\"\" Event \u00b6 Bases: dj . Imported Automated table with event related information WRT: With respect to Attributes: Name Type Description BehaviorRecording foreign key Behavior recording primary key. EventType foreign key EventType primary key. event_start_time float Time of event onset in seconds, WRT recording start. event_end_time float Optional. Seconds WRT recording start. Source code in element_event/event.py 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 @schema class Event ( dj . Imported ): \"\"\"Automated table with event related information WRT: With respect to Attributes: BehaviorRecording (foreign key): Behavior recording primary key. EventType (foreign key): EventType primary key. event_start_time (float): Time of event onset in seconds, WRT recording start. event_end_time (float): Optional. Seconds WRT recording start. \"\"\" definition = \"\"\" -> BehaviorRecording -> EventType event_start_time : float # (second) relative to recording start --- event_end_time=null : float # (second) relative to recording start \"\"\" def make ( self , key ): \"\"\"Populate based on unique entries in BehaviorRecording and EventType.\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" ) make ( key ) \u00b6 Populate based on unique entries in BehaviorRecording and EventType. Source code in element_event/event.py 161 162 163 def make ( self , key ): \"\"\"Populate based on unique entries in BehaviorRecording and EventType.\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" ) AlignmentEvent \u00b6 Bases: dj . Manual Table designed to provide a mechanism for performing event-aligned analyses To use entries from trial.Trial, trial_start_time and trial_end_time must be entered in the Event table. WRT = With respect to Attributes alignment_name ( varchar(32) ): Unique alignment name. alignment_description ( varchar(1000) ): Optional. Longer description. alignment_event_type (foreign key): Event type to align to. alignment_time_shift (float): Seconds WRT alignment_event_type start_event_type (foreign key): Event before alignment event type start_time_shift (float): Seconds WRT start_event_type end_event_type (foreign key): Event after alignment event type end_time_shift (float): Seconds WRT end_event_type Source code in element_event/event.py 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 @schema class AlignmentEvent ( dj . Manual ): \"\"\"Table designed to provide a mechanism for performing event-aligned analyses To use entries from trial.Trial, trial_start_time and trial_end_time must be entered in the Event table. WRT = With respect to Attributes alignment_name ( varchar(32) ): Unique alignment name. alignment_description ( varchar(1000) ): Optional. Longer description. alignment_event_type (foreign key): Event type to align to. alignment_time_shift (float): Seconds WRT alignment_event_type start_event_type (foreign key): Event before alignment event type start_time_shift (float): Seconds WRT start_event_type end_event_type (foreign key): Event after alignment event type end_time_shift (float): Seconds WRT end_event_type \"\"\" definition = \"\"\" # time_shift is seconds to shift with respect to (WRT) a variable alignment_name: varchar(32) --- alignment_description='': varchar(1000) -> EventType.proj(alignment_event_type='event_type') # event type to align to alignment_time_shift: float # (s) WRT alignment_event_type -> EventType.proj(start_event_type='event_type') # event before alignment_event_type start_time_shift: float # (s) WRT start_event_type -> EventType.proj(end_event_type='event_type') # event after alignment_event_type end_time_shift: float # (s) WRT end_event_type \"\"\"", "title": "event.py"}, {"location": "api/element_event/event/#element_event.event.activate", "text": "Activate this schema. Parameters: Name Type Description Default schema_name str schema name on the database server required create_schema bool when True (default), create schema in the database if it does not yet exist. True create_tables str when True (default), create schema tables in the database if they do not yet exist. True linking_module str a module (or name) containing the required dependencies. None Dependencies: Upstream tables Session: parent table to BehaviorRecording, identifying a recording session. Project: the project with which experimental sessions are associated Experimenter: the experimenter(s) participating in a given session To supply from element-lab add Experimenter = lab.User to your workflow/pipeline.py before session.activate() Functions get_experiment_root_data_dir(): Retrieve the root data director(y/ies) with behavioral recordings (e.g., bpod files) for all subject/sessions, returns a string for full path to the root data directory. get_session_directory(session_key: dict): Retrieve the session directory containing the recording(s) for a given Session, returns a string for full path to the session directory Source code in element_event/event.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def activate ( schema_name , * , create_schema = True , create_tables = True , linking_module = None ): \"\"\"Activate this schema. Args: schema_name (str): schema name on the database server create_schema (bool): when True (default), create schema in the database if it does not yet exist. create_tables (str): when True (default), create schema tables in the database if they do not yet exist. linking_module (str): a module (or name) containing the required dependencies. Dependencies: Upstream tables: Session: parent table to BehaviorRecording, identifying a recording session. Project: the project with which experimental sessions are associated Experimenter: the experimenter(s) participating in a given session To supply from element-lab add `Experimenter = lab.User` to your `workflow/pipeline.py` before `session.activate()` Functions: get_experiment_root_data_dir(): Retrieve the root data director(y/ies) with behavioral recordings (e.g., bpod files) for all subject/sessions, returns a string for full path to the root data directory. get_session_directory(session_key: dict): Retrieve the session directory containing the recording(s) for a given Session, returns a string for full path to the session directory \"\"\" if isinstance ( linking_module , str ): linking_module = importlib . import_module ( linking_module ) assert inspect . ismodule ( linking_module ), ( \"The argument 'dependency' must\" + \" be a module or module name\" ) schema . activate ( schema_name , create_schema = create_schema , create_tables = create_tables , add_objects = linking_module . __dict__ , )", "title": "activate()"}, {"location": "api/element_event/event/#element_event.event.get_experiment_root_data_dir", "text": "Pulls relevant func from parent namespace to specify root data dir(s). It is recommended that all paths in DataJoint Elements stored as relative paths, with respect to some user-configured \"root\" director(y/ies). The root(s) may vary between data modalities and user machines. Returns a full path string to behavioral root data directory or list of strings for possible root data directories. Returns: Name Type Description Paths list List of path(s) to root directories for event data Source code in element_event/event.py 60 61 62 63 64 65 66 67 68 69 70 71 72 def get_experiment_root_data_dir () -> list : \"\"\"Pulls relevant func from parent namespace to specify root data dir(s). It is recommended that all paths in DataJoint Elements stored as relative paths, with respect to some user-configured \"root\" director(y/ies). The root(s) may vary between data modalities and user machines. Returns a full path string to behavioral root data directory or list of strings for possible root data directories. Returns: Paths (list): List of path(s) to root directories for event data \"\"\" return _linking_module . get_experiment_root_data_dir ()", "title": "get_experiment_root_data_dir()"}, {"location": "api/element_event/event/#element_event.event.get_session_directory", "text": "Pulls relative function from parent namespace. Retrieves the session directory containing the recorded data for a given Session. Returns a string for full path to the session directory. Returns: Name Type Description Session_dir str Relative path to session directory Source code in element_event/event.py 75 76 77 78 79 80 81 82 83 84 85 def get_session_directory ( session_key : dict ) -> str : \"\"\"Pulls relative function from parent namespace. Retrieves the session directory containing the recorded data for a given Session. Returns a string for full path to the session directory. Returns: Session_dir (str): Relative path to session directory \"\"\" return _linking_module . get_session_directory ( session_key )", "title": "get_session_directory()"}, {"location": "api/element_event/event/#element_event.event.EventType", "text": "Bases: dj . Lookup Set of unique events present within a recording session Attributes: Name Type Description event_type varchar(16) Unique event type. event_type_description varchar(256) Event type description. Source code in element_event/event.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 @schema class EventType ( dj . Lookup ): \"\"\"Set of unique events present within a recording session Attributes: event_type ( varchar(16) ): Unique event type. event_type_description ( varchar(256) ): Event type description. \"\"\" definition = \"\"\" event_type : varchar(16) --- event_type_description='' : varchar(256) \"\"\"", "title": "EventType"}, {"location": "api/element_event/event/#element_event.event.BehaviorRecording", "text": "Bases: dj . Manual Behavior Recordings Attributes: Name Type Description Session foreign key Session primary key. recording_start_time datetime Start time of recording. recording_duration float Duration of recording. recording_notes varchar(256) Optional recording related notes. Source code in element_event/event.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 @schema class BehaviorRecording ( dj . Manual ): \"\"\"Behavior Recordings Attributes: Session (foreign key): Session primary key. recording_start_time (datetime): Start time of recording. recording_duration (float): Duration of recording. recording_notes ( varchar(256) ): Optional recording related notes. \"\"\" definition = \"\"\" -> Session --- recording_start_time=null : datetime recording_duration=null : float recording_notes='' : varchar(256) \"\"\" class File ( dj . Part ): \"\"\"File IDs and paths associated with a behavior recording Attributes: BehaviorRecording (foreign key): Behavior recording primary key. filepath ( varchar(64) ): file path of video, relative to root data dir. \"\"\" definition = \"\"\" -> master filepath : varchar(64) \"\"\"", "title": "BehaviorRecording"}, {"location": "api/element_event/event/#element_event.event.BehaviorRecording.File", "text": "Bases: dj . Part File IDs and paths associated with a behavior recording Attributes: Name Type Description BehaviorRecording foreign key Behavior recording primary key. filepath varchar(64) file path of video, relative to root data dir. Source code in element_event/event.py 126 127 128 129 130 131 132 133 134 135 136 137 class File ( dj . Part ): \"\"\"File IDs and paths associated with a behavior recording Attributes: BehaviorRecording (foreign key): Behavior recording primary key. filepath ( varchar(64) ): file path of video, relative to root data dir. \"\"\" definition = \"\"\" -> master filepath : varchar(64) \"\"\"", "title": "File"}, {"location": "api/element_event/event/#element_event.event.Event", "text": "Bases: dj . Imported Automated table with event related information WRT: With respect to Attributes: Name Type Description BehaviorRecording foreign key Behavior recording primary key. EventType foreign key EventType primary key. event_start_time float Time of event onset in seconds, WRT recording start. event_end_time float Optional. Seconds WRT recording start. Source code in element_event/event.py 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 @schema class Event ( dj . Imported ): \"\"\"Automated table with event related information WRT: With respect to Attributes: BehaviorRecording (foreign key): Behavior recording primary key. EventType (foreign key): EventType primary key. event_start_time (float): Time of event onset in seconds, WRT recording start. event_end_time (float): Optional. Seconds WRT recording start. \"\"\" definition = \"\"\" -> BehaviorRecording -> EventType event_start_time : float # (second) relative to recording start --- event_end_time=null : float # (second) relative to recording start \"\"\" def make ( self , key ): \"\"\"Populate based on unique entries in BehaviorRecording and EventType.\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" )", "title": "Event"}, {"location": "api/element_event/event/#element_event.event.Event.make", "text": "Populate based on unique entries in BehaviorRecording and EventType. Source code in element_event/event.py 161 162 163 def make ( self , key ): \"\"\"Populate based on unique entries in BehaviorRecording and EventType.\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" )", "title": "make()"}, {"location": "api/element_event/event/#element_event.event.AlignmentEvent", "text": "Bases: dj . Manual Table designed to provide a mechanism for performing event-aligned analyses To use entries from trial.Trial, trial_start_time and trial_end_time must be entered in the Event table. WRT = With respect to Attributes alignment_name ( varchar(32) ): Unique alignment name. alignment_description ( varchar(1000) ): Optional. Longer description. alignment_event_type (foreign key): Event type to align to. alignment_time_shift (float): Seconds WRT alignment_event_type start_event_type (foreign key): Event before alignment event type start_time_shift (float): Seconds WRT start_event_type end_event_type (foreign key): Event after alignment event type end_time_shift (float): Seconds WRT end_event_type Source code in element_event/event.py 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 @schema class AlignmentEvent ( dj . Manual ): \"\"\"Table designed to provide a mechanism for performing event-aligned analyses To use entries from trial.Trial, trial_start_time and trial_end_time must be entered in the Event table. WRT = With respect to Attributes alignment_name ( varchar(32) ): Unique alignment name. alignment_description ( varchar(1000) ): Optional. Longer description. alignment_event_type (foreign key): Event type to align to. alignment_time_shift (float): Seconds WRT alignment_event_type start_event_type (foreign key): Event before alignment event type start_time_shift (float): Seconds WRT start_event_type end_event_type (foreign key): Event after alignment event type end_time_shift (float): Seconds WRT end_event_type \"\"\" definition = \"\"\" # time_shift is seconds to shift with respect to (WRT) a variable alignment_name: varchar(32) --- alignment_description='': varchar(1000) -> EventType.proj(alignment_event_type='event_type') # event type to align to alignment_time_shift: float # (s) WRT alignment_event_type -> EventType.proj(start_event_type='event_type') # event before alignment_event_type start_time_shift: float # (s) WRT start_event_type -> EventType.proj(end_event_type='event_type') # event after alignment_event_type end_time_shift: float # (s) WRT end_event_type \"\"\"", "title": "AlignmentEvent"}, {"location": "api/element_event/trial/", "text": "Events are linked to Trials activate ( trial_schema_name , event_schema_name , * , create_schema = True , create_tables = True , linking_module = None ) \u00b6 Activate this schema. Parameters: Name Type Description Default trial_schema_name str schema name on the database server to activate the trial element required event_schema_name str schema name on the database server to activate the event element required create_schema bool when True (default), create schema in the database if it does not yet exist. True create_tables str when True (default), create schema tables in the database if they do not yet exist. True linking_module str a module (or name) containing the required dependencies to activate the trial element None Dependencies: Upstream tables Session: parent table to BehaviorRecording, identifying a recording session. Functions get_trialized_alignment_event_times(alignment_event_key: dict, trial_restriction: dict): For the trials identified by trial_restriction, identify recording times with respect to a given alignment_event. Returns pandas dataframe with trial_key, start (recording time), event (recording time), and end (recording time). Source code in element_event/trial.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def activate ( trial_schema_name , event_schema_name , * , create_schema = True , create_tables = True , linking_module = None , ): \"\"\"Activate this schema. Args: trial_schema_name (str): schema name on the database server to activate the `trial` element event_schema_name (str): schema name on the database server to activate the `event` element create_schema (bool): when True (default), create schema in the database if it does not yet exist. create_tables (str): when True (default), create schema tables in the database if they do not yet exist. linking_module (str): a module (or name) containing the required dependencies to activate the `trial` element Dependencies: Upstream tables: Session: parent table to BehaviorRecording, identifying a recording session. Functions: get_trialized_alignment_event_times(alignment_event_key: dict, trial_restriction: dict): For the trials identified by trial_restriction, identify recording times with respect to a given alignment_event. Returns pandas dataframe with trial_key, start (recording time), event (recording time), and end (recording time). \"\"\" if isinstance ( linking_module , str ): linking_module = importlib . import_module ( linking_module ) assert inspect . ismodule ( linking_module ), ( \"The argument 'dependency' must\" + \" be a module or module name\" ) global _linking_module _linking_module = linking_module event . activate ( event_schema_name , create_schema = create_schema , create_tables = create_tables , linking_module = _linking_module , ) schema . activate ( trial_schema_name , create_schema = create_schema , create_tables = create_tables , add_objects = _linking_module . __dict__ , ) Block \u00b6 Bases: dj . Imported Set of experimental blocks within a recording session Attributes event.BehaviorRecording (foreign key): event.BehaviorRecording primary key. block_id (smallint): block number (1-based indexing) block_start_time (float): Seconds relative to recording start block_stop_time (float): Seconds relative to recording stop Source code in element_event/trial.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 @schema class Block ( dj . Imported ): \"\"\"Set of experimental blocks within a recording session Attributes event.BehaviorRecording (foreign key): event.BehaviorRecording primary key. block_id (smallint): block number (1-based indexing) block_start_time (float): Seconds relative to recording start block_stop_time (float): Seconds relative to recording stop \"\"\" definition = \"\"\" # Experimental blocks -> event.BehaviorRecording block_id : smallint # block number (1-based indexing) --- block_start_time : float # (s) relative to recording start block_stop_time : float # (s) relative to recording stop \"\"\" class Attribute ( dj . Part ): \"\"\"Extra Block attributes to fully describe a block Attributes: Block (foreign key): Block table primary key. attribute_name ( varchar(32) ): Name of block attribute attribute_value ( varchar(2000) ): Optional. Block attribute value attribute_blob (longblob): Optional. Block attribute numerical numerical data \"\"\" definition = \"\"\" # Additional block attributes to fully describe a block -> master attribute_name : varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\" def make ( self , key ): \"\"\"Populate each unique entry in event.BehaviorRecording\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" ) Attribute \u00b6 Bases: dj . Part Extra Block attributes to fully describe a block Attributes: Name Type Description Block foreign key Block table primary key. attribute_name varchar(32) Name of block attribute attribute_value varchar(2000) Optional. Block attribute value attribute_blob longblob Optional. Block attribute numerical numerical data Source code in element_event/trial.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 class Attribute ( dj . Part ): \"\"\"Extra Block attributes to fully describe a block Attributes: Block (foreign key): Block table primary key. attribute_name ( varchar(32) ): Name of block attribute attribute_value ( varchar(2000) ): Optional. Block attribute value attribute_blob (longblob): Optional. Block attribute numerical numerical data \"\"\" definition = \"\"\" # Additional block attributes to fully describe a block -> master attribute_name : varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\" make ( key ) \u00b6 Populate each unique entry in event.BehaviorRecording Source code in element_event/trial.py 113 114 115 def make ( self , key ): \"\"\"Populate each unique entry in event.BehaviorRecording\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" ) TrialType \u00b6 Bases: dj . Lookup Set of unique trial types present within a recording session Attributes: Name Type Description trial_type varchar(16) Name of trial type trial_type_description varchar(256) Optional. Long Description. Source code in element_event/trial.py 118 119 120 121 122 123 124 125 126 127 128 129 130 131 @schema class TrialType ( dj . Lookup ): \"\"\"Set of unique trial types present within a recording session Attributes: trial_type ( varchar(16) ): Name of trial type trial_type_description ( varchar(256) ): Optional. Long Description. \"\"\" definition = \"\"\" trial_type : varchar(16) --- trial_type_description='' : varchar(256) \"\"\" Trial \u00b6 Bases: dj . Imported Set of all experimental trials from a behavioral recording Attributes: Name Type Description event.BehaviorRecording foreign key BehaviorRecording primary key trial_id smallint trial number (1-based indexing) TrialType foreign key Optional. TrialType primary key trial_start_time float Seconds relative to recording start trial_stop_time float Seconds relative to recording stop Source code in element_event/trial.py 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 @schema class Trial ( dj . Imported ): \"\"\"Set of all experimental trials from a behavioral recording Attributes: event.BehaviorRecording (foreign key): BehaviorRecording primary key trial_id (smallint): trial number (1-based indexing) TrialType (foreign key): Optional. TrialType primary key trial_start_time (float): Seconds relative to recording start trial_stop_time (float): Seconds relative to recording stop \"\"\" definition = \"\"\" # Experimental trials -> event.BehaviorRecording trial_id : smallint # trial number (1-based indexing) --- -> [nullable] TrialType trial_start_time : float # (second) relative to recording start trial_stop_time : float # (second) relative to recording stop \"\"\" class Attribute ( dj . Part ): \"\"\"Extra trial attributes to fully describe a trial Attributes: Trial (foreign key): Trial table primary key. attribute_name ( varchar(32) ): Name of trial attribute attribute_value ( varchar(2000) ): Optional. Trial attribute value attribute_blob (longblob): Optional. Trial attribute numerical data \"\"\" definition = \"\"\" # Additional trial attributes to fully describe a trial -> master attribute_name : varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\" def make ( self , key ): \"\"\"Populate for each unique entry in event.BehaviorRecording\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" ) Attribute \u00b6 Bases: dj . Part Extra trial attributes to fully describe a trial Attributes: Name Type Description Trial foreign key Trial table primary key. attribute_name varchar(32) Name of trial attribute attribute_value varchar(2000) Optional. Trial attribute value attribute_blob longblob Optional. Trial attribute numerical data Source code in element_event/trial.py 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 class Attribute ( dj . Part ): \"\"\"Extra trial attributes to fully describe a trial Attributes: Trial (foreign key): Trial table primary key. attribute_name ( varchar(32) ): Name of trial attribute attribute_value ( varchar(2000) ): Optional. Trial attribute value attribute_blob (longblob): Optional. Trial attribute numerical data \"\"\" definition = \"\"\" # Additional trial attributes to fully describe a trial -> master attribute_name : varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\" make ( key ) \u00b6 Populate for each unique entry in event.BehaviorRecording Source code in element_event/trial.py 173 174 175 def make ( self , key ): \"\"\"Populate for each unique entry in event.BehaviorRecording\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" ) BlockTrial \u00b6 Bases: dj . Imported Set of trials associated with certain blocks Attributes: Name Type Description Block foreign key Block primary key Trial foreign key Trial primary key Source code in element_event/trial.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 @schema class BlockTrial ( dj . Imported ): \"\"\"Set of trials associated with certain blocks Attributes: Block (foreign key): Block primary key Trial (foreign key): Trial primary key \"\"\" definition = \"\"\" -> Block -> Trial \"\"\" def make ( self , key ): \"\"\"Populate for each unique entry in Trial and Block\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" ) make ( key ) \u00b6 Populate for each unique entry in Trial and Block Source code in element_event/trial.py 192 193 194 def make ( self , key ): \"\"\"Populate for each unique entry in Trial and Block\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" ) TrialEvent \u00b6 Bases: dj . Imported Set of trials associated with certain events Attributes: Name Type Description Block foreign key Block primary key event.Event foreign key event.Event primary key Source code in element_event/trial.py 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 @schema class TrialEvent ( dj . Imported ): \"\"\"Set of trials associated with certain events Attributes: Block (foreign key): Block primary key event.Event (foreign key): event.Event primary key \"\"\" definition = \"\"\" -> Trial -> event.Event \"\"\" def make ( self , key ): \"\"\"Populate for each unique entry in Trial and event.Event\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" ) make ( key ) \u00b6 Populate for each unique entry in Trial and event.Event Source code in element_event/trial.py 211 212 213 def make ( self , key ): \"\"\"Populate for each unique entry in Trial and event.Event\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" ) get_trialized_alignment_event_times ( alignment_event_key , trial_restriction ) \u00b6 For the trials in trial_restriction, identify times WRT a given alignment_event. WRT = With respect to Parameters: Name Type Description Default alignment_event_key dict key including information from event.AlignmentEvent required trial_restriction dict set or subset of trials from trial.Trial required Returns: Name Type Description dataset pandas Dataframe with each of the items listed below. Dataset trial_key (dict): key identifying a single trial start (float): recording time (s) of the beginning of an alignment window event (float): recording time (s) of an alignment event within the trial. If multiple events within a trial, select the last one end (float): recording time (s) of the end of an alignment window Source code in element_event/trial.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 def get_trialized_alignment_event_times ( alignment_event_key , trial_restriction ): \"\"\"For the trials in trial_restriction, identify times WRT a given alignment_event. WRT = With respect to Args: alignment_event_key (dict): key including information from event.AlignmentEvent trial_restriction (dict): set or subset of trials from trial.Trial Returns: dataset (pandas): Dataframe with each of the items listed below. Dataset: trial_key (dict): key identifying a single trial \\n start (float): recording time (s) of the beginning of an alignment window \\n event (float): recording time (s) of an alignment event within the trial. If multiple events within a trial, select the last one\\n end (float): recording time (s) of the end of an alignment window \"\"\" import pandas as pd session_key = ( _linking_module . Session & trial_restriction ) . fetch1 ( \"KEY\" ) trial_keys , trial_starts , trial_ends = ( Trial ^ trial_restriction ) . fetch ( \"KEY\" , \"trial_start_time\" , \"trial_stop_time\" , order_by = \"trial_id\" ) alignment_spec = ( event . AlignmentEvent & alignment_event_key ) . fetch1 () alignment_times = [] for trial_key , trial_start , trial_stop in zip ( trial_keys , trial_starts , trial_ends ): alignment_event_time = ( event . Event & session_key & { \"event_type\" : alignment_spec [ \"alignment_event_type\" ]} & f \"event_start_time BETWEEN { trial_start } AND { trial_stop } \" ) if alignment_event_time : # if multiple alignment events, pick the last one in the trial alignment_event_time = alignment_event_time . fetch ( \"event_start_time\" , order_by = \"event_start_time DESC\" , limit = 1 )[ 0 ] else : alignment_times . append ( { \"trial_key\" : trial_key , \"start\" : None , \"event\" : None , \"end\" : None } ) continue alignment_start_time = ( event . Event & session_key & { \"event_type\" : alignment_spec [ \"start_event_type\" ]} & f \"event_start_time < { alignment_event_time } \" ) if alignment_start_time : # if multiple start events, pick most immediate prior alignment event alignment_start_time = alignment_start_time . fetch ( \"event_start_time\" , order_by = \"event_start_time DESC\" , limit = 1 )[ 0 ] alignment_start_time = max ( alignment_start_time , trial_start ) else : alignment_start_time = trial_start alignment_end_time = ( event . Event & session_key & { \"event_type\" : alignment_spec [ \"end_event_type\" ]} & f \"event_start_time > { alignment_event_time } \" ) if alignment_end_time : # if multiple of such start event, pick most immediate after alignment event alignment_end_time = alignment_end_time . fetch ( \"event_start_time\" , order_by = \"event_start_time\" , limit = 1 )[ 0 ] alignment_end_time = min ( alignment_end_time , trial_stop ) else : alignment_end_time = trial_stop alignment_start_time += alignment_spec [ \"start_time_shift\" ] alignment_event_time += alignment_spec [ \"alignment_time_shift\" ] alignment_end_time += alignment_spec [ \"end_time_shift\" ] alignment_times . append ( { \"trial_key\" : trial_key , \"start\" : alignment_start_time , \"event\" : alignment_event_time , \"end\" : alignment_end_time , } ) return pd . DataFrame ( alignment_times )", "title": "trial.py"}, {"location": "api/element_event/trial/#element_event.trial.activate", "text": "Activate this schema. Parameters: Name Type Description Default trial_schema_name str schema name on the database server to activate the trial element required event_schema_name str schema name on the database server to activate the event element required create_schema bool when True (default), create schema in the database if it does not yet exist. True create_tables str when True (default), create schema tables in the database if they do not yet exist. True linking_module str a module (or name) containing the required dependencies to activate the trial element None Dependencies: Upstream tables Session: parent table to BehaviorRecording, identifying a recording session. Functions get_trialized_alignment_event_times(alignment_event_key: dict, trial_restriction: dict): For the trials identified by trial_restriction, identify recording times with respect to a given alignment_event. Returns pandas dataframe with trial_key, start (recording time), event (recording time), and end (recording time). Source code in element_event/trial.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def activate ( trial_schema_name , event_schema_name , * , create_schema = True , create_tables = True , linking_module = None , ): \"\"\"Activate this schema. Args: trial_schema_name (str): schema name on the database server to activate the `trial` element event_schema_name (str): schema name on the database server to activate the `event` element create_schema (bool): when True (default), create schema in the database if it does not yet exist. create_tables (str): when True (default), create schema tables in the database if they do not yet exist. linking_module (str): a module (or name) containing the required dependencies to activate the `trial` element Dependencies: Upstream tables: Session: parent table to BehaviorRecording, identifying a recording session. Functions: get_trialized_alignment_event_times(alignment_event_key: dict, trial_restriction: dict): For the trials identified by trial_restriction, identify recording times with respect to a given alignment_event. Returns pandas dataframe with trial_key, start (recording time), event (recording time), and end (recording time). \"\"\" if isinstance ( linking_module , str ): linking_module = importlib . import_module ( linking_module ) assert inspect . ismodule ( linking_module ), ( \"The argument 'dependency' must\" + \" be a module or module name\" ) global _linking_module _linking_module = linking_module event . activate ( event_schema_name , create_schema = create_schema , create_tables = create_tables , linking_module = _linking_module , ) schema . activate ( trial_schema_name , create_schema = create_schema , create_tables = create_tables , add_objects = _linking_module . __dict__ , )", "title": "activate()"}, {"location": "api/element_event/trial/#element_event.trial.Block", "text": "Bases: dj . Imported Set of experimental blocks within a recording session Attributes event.BehaviorRecording (foreign key): event.BehaviorRecording primary key. block_id (smallint): block number (1-based indexing) block_start_time (float): Seconds relative to recording start block_stop_time (float): Seconds relative to recording stop Source code in element_event/trial.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 @schema class Block ( dj . Imported ): \"\"\"Set of experimental blocks within a recording session Attributes event.BehaviorRecording (foreign key): event.BehaviorRecording primary key. block_id (smallint): block number (1-based indexing) block_start_time (float): Seconds relative to recording start block_stop_time (float): Seconds relative to recording stop \"\"\" definition = \"\"\" # Experimental blocks -> event.BehaviorRecording block_id : smallint # block number (1-based indexing) --- block_start_time : float # (s) relative to recording start block_stop_time : float # (s) relative to recording stop \"\"\" class Attribute ( dj . Part ): \"\"\"Extra Block attributes to fully describe a block Attributes: Block (foreign key): Block table primary key. attribute_name ( varchar(32) ): Name of block attribute attribute_value ( varchar(2000) ): Optional. Block attribute value attribute_blob (longblob): Optional. Block attribute numerical numerical data \"\"\" definition = \"\"\" # Additional block attributes to fully describe a block -> master attribute_name : varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\" def make ( self , key ): \"\"\"Populate each unique entry in event.BehaviorRecording\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" )", "title": "Block"}, {"location": "api/element_event/trial/#element_event.trial.Block.Attribute", "text": "Bases: dj . Part Extra Block attributes to fully describe a block Attributes: Name Type Description Block foreign key Block table primary key. attribute_name varchar(32) Name of block attribute attribute_value varchar(2000) Optional. Block attribute value attribute_blob longblob Optional. Block attribute numerical numerical data Source code in element_event/trial.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 class Attribute ( dj . Part ): \"\"\"Extra Block attributes to fully describe a block Attributes: Block (foreign key): Block table primary key. attribute_name ( varchar(32) ): Name of block attribute attribute_value ( varchar(2000) ): Optional. Block attribute value attribute_blob (longblob): Optional. Block attribute numerical numerical data \"\"\" definition = \"\"\" # Additional block attributes to fully describe a block -> master attribute_name : varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\"", "title": "Attribute"}, {"location": "api/element_event/trial/#element_event.trial.Block.make", "text": "Populate each unique entry in event.BehaviorRecording Source code in element_event/trial.py 113 114 115 def make ( self , key ): \"\"\"Populate each unique entry in event.BehaviorRecording\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" )", "title": "make()"}, {"location": "api/element_event/trial/#element_event.trial.TrialType", "text": "Bases: dj . Lookup Set of unique trial types present within a recording session Attributes: Name Type Description trial_type varchar(16) Name of trial type trial_type_description varchar(256) Optional. Long Description. Source code in element_event/trial.py 118 119 120 121 122 123 124 125 126 127 128 129 130 131 @schema class TrialType ( dj . Lookup ): \"\"\"Set of unique trial types present within a recording session Attributes: trial_type ( varchar(16) ): Name of trial type trial_type_description ( varchar(256) ): Optional. Long Description. \"\"\" definition = \"\"\" trial_type : varchar(16) --- trial_type_description='' : varchar(256) \"\"\"", "title": "TrialType"}, {"location": "api/element_event/trial/#element_event.trial.Trial", "text": "Bases: dj . Imported Set of all experimental trials from a behavioral recording Attributes: Name Type Description event.BehaviorRecording foreign key BehaviorRecording primary key trial_id smallint trial number (1-based indexing) TrialType foreign key Optional. TrialType primary key trial_start_time float Seconds relative to recording start trial_stop_time float Seconds relative to recording stop Source code in element_event/trial.py 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 @schema class Trial ( dj . Imported ): \"\"\"Set of all experimental trials from a behavioral recording Attributes: event.BehaviorRecording (foreign key): BehaviorRecording primary key trial_id (smallint): trial number (1-based indexing) TrialType (foreign key): Optional. TrialType primary key trial_start_time (float): Seconds relative to recording start trial_stop_time (float): Seconds relative to recording stop \"\"\" definition = \"\"\" # Experimental trials -> event.BehaviorRecording trial_id : smallint # trial number (1-based indexing) --- -> [nullable] TrialType trial_start_time : float # (second) relative to recording start trial_stop_time : float # (second) relative to recording stop \"\"\" class Attribute ( dj . Part ): \"\"\"Extra trial attributes to fully describe a trial Attributes: Trial (foreign key): Trial table primary key. attribute_name ( varchar(32) ): Name of trial attribute attribute_value ( varchar(2000) ): Optional. Trial attribute value attribute_blob (longblob): Optional. Trial attribute numerical data \"\"\" definition = \"\"\" # Additional trial attributes to fully describe a trial -> master attribute_name : varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\" def make ( self , key ): \"\"\"Populate for each unique entry in event.BehaviorRecording\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" )", "title": "Trial"}, {"location": "api/element_event/trial/#element_event.trial.Trial.Attribute", "text": "Bases: dj . Part Extra trial attributes to fully describe a trial Attributes: Name Type Description Trial foreign key Trial table primary key. attribute_name varchar(32) Name of trial attribute attribute_value varchar(2000) Optional. Trial attribute value attribute_blob longblob Optional. Trial attribute numerical data Source code in element_event/trial.py 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 class Attribute ( dj . Part ): \"\"\"Extra trial attributes to fully describe a trial Attributes: Trial (foreign key): Trial table primary key. attribute_name ( varchar(32) ): Name of trial attribute attribute_value ( varchar(2000) ): Optional. Trial attribute value attribute_blob (longblob): Optional. Trial attribute numerical data \"\"\" definition = \"\"\" # Additional trial attributes to fully describe a trial -> master attribute_name : varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\"", "title": "Attribute"}, {"location": "api/element_event/trial/#element_event.trial.Trial.make", "text": "Populate for each unique entry in event.BehaviorRecording Source code in element_event/trial.py 173 174 175 def make ( self , key ): \"\"\"Populate for each unique entry in event.BehaviorRecording\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" )", "title": "make()"}, {"location": "api/element_event/trial/#element_event.trial.BlockTrial", "text": "Bases: dj . Imported Set of trials associated with certain blocks Attributes: Name Type Description Block foreign key Block primary key Trial foreign key Trial primary key Source code in element_event/trial.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 @schema class BlockTrial ( dj . Imported ): \"\"\"Set of trials associated with certain blocks Attributes: Block (foreign key): Block primary key Trial (foreign key): Trial primary key \"\"\" definition = \"\"\" -> Block -> Trial \"\"\" def make ( self , key ): \"\"\"Populate for each unique entry in Trial and Block\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" )", "title": "BlockTrial"}, {"location": "api/element_event/trial/#element_event.trial.BlockTrial.make", "text": "Populate for each unique entry in Trial and Block Source code in element_event/trial.py 192 193 194 def make ( self , key ): \"\"\"Populate for each unique entry in Trial and Block\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" )", "title": "make()"}, {"location": "api/element_event/trial/#element_event.trial.TrialEvent", "text": "Bases: dj . Imported Set of trials associated with certain events Attributes: Name Type Description Block foreign key Block primary key event.Event foreign key event.Event primary key Source code in element_event/trial.py 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 @schema class TrialEvent ( dj . Imported ): \"\"\"Set of trials associated with certain events Attributes: Block (foreign key): Block primary key event.Event (foreign key): event.Event primary key \"\"\" definition = \"\"\" -> Trial -> event.Event \"\"\" def make ( self , key ): \"\"\"Populate for each unique entry in Trial and event.Event\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" )", "title": "TrialEvent"}, {"location": "api/element_event/trial/#element_event.trial.TrialEvent.make", "text": "Populate for each unique entry in Trial and event.Event Source code in element_event/trial.py 211 212 213 def make ( self , key ): \"\"\"Populate for each unique entry in Trial and event.Event\"\"\" raise NotImplementedError ( \"For `insert`, use `allow_direct_insert=True`\" )", "title": "make()"}, {"location": "api/element_event/trial/#element_event.trial.get_trialized_alignment_event_times", "text": "For the trials in trial_restriction, identify times WRT a given alignment_event. WRT = With respect to Parameters: Name Type Description Default alignment_event_key dict key including information from event.AlignmentEvent required trial_restriction dict set or subset of trials from trial.Trial required Returns: Name Type Description dataset pandas Dataframe with each of the items listed below. Dataset trial_key (dict): key identifying a single trial start (float): recording time (s) of the beginning of an alignment window event (float): recording time (s) of an alignment event within the trial. If multiple events within a trial, select the last one end (float): recording time (s) of the end of an alignment window Source code in element_event/trial.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 def get_trialized_alignment_event_times ( alignment_event_key , trial_restriction ): \"\"\"For the trials in trial_restriction, identify times WRT a given alignment_event. WRT = With respect to Args: alignment_event_key (dict): key including information from event.AlignmentEvent trial_restriction (dict): set or subset of trials from trial.Trial Returns: dataset (pandas): Dataframe with each of the items listed below. Dataset: trial_key (dict): key identifying a single trial \\n start (float): recording time (s) of the beginning of an alignment window \\n event (float): recording time (s) of an alignment event within the trial. If multiple events within a trial, select the last one\\n end (float): recording time (s) of the end of an alignment window \"\"\" import pandas as pd session_key = ( _linking_module . Session & trial_restriction ) . fetch1 ( \"KEY\" ) trial_keys , trial_starts , trial_ends = ( Trial ^ trial_restriction ) . fetch ( \"KEY\" , \"trial_start_time\" , \"trial_stop_time\" , order_by = \"trial_id\" ) alignment_spec = ( event . AlignmentEvent & alignment_event_key ) . fetch1 () alignment_times = [] for trial_key , trial_start , trial_stop in zip ( trial_keys , trial_starts , trial_ends ): alignment_event_time = ( event . Event & session_key & { \"event_type\" : alignment_spec [ \"alignment_event_type\" ]} & f \"event_start_time BETWEEN { trial_start } AND { trial_stop } \" ) if alignment_event_time : # if multiple alignment events, pick the last one in the trial alignment_event_time = alignment_event_time . fetch ( \"event_start_time\" , order_by = \"event_start_time DESC\" , limit = 1 )[ 0 ] else : alignment_times . append ( { \"trial_key\" : trial_key , \"start\" : None , \"event\" : None , \"end\" : None } ) continue alignment_start_time = ( event . Event & session_key & { \"event_type\" : alignment_spec [ \"start_event_type\" ]} & f \"event_start_time < { alignment_event_time } \" ) if alignment_start_time : # if multiple start events, pick most immediate prior alignment event alignment_start_time = alignment_start_time . fetch ( \"event_start_time\" , order_by = \"event_start_time DESC\" , limit = 1 )[ 0 ] alignment_start_time = max ( alignment_start_time , trial_start ) else : alignment_start_time = trial_start alignment_end_time = ( event . Event & session_key & { \"event_type\" : alignment_spec [ \"end_event_type\" ]} & f \"event_start_time > { alignment_event_time } \" ) if alignment_end_time : # if multiple of such start event, pick most immediate after alignment event alignment_end_time = alignment_end_time . fetch ( \"event_start_time\" , order_by = \"event_start_time\" , limit = 1 )[ 0 ] alignment_end_time = min ( alignment_end_time , trial_stop ) else : alignment_end_time = trial_stop alignment_start_time += alignment_spec [ \"start_time_shift\" ] alignment_event_time += alignment_spec [ \"alignment_time_shift\" ] alignment_end_time += alignment_spec [ \"end_time_shift\" ] alignment_times . append ( { \"trial_key\" : trial_key , \"start\" : alignment_start_time , \"event\" : alignment_event_time , \"end\" : alignment_end_time , } ) return pd . DataFrame ( alignment_times )", "title": "get_trialized_alignment_event_times()"}, {"location": "api/element_event/version/", "text": "Package metadata.", "title": "version.py"}]}