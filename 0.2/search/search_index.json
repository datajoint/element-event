{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Element Event", "text": "<p>DataJoint Element for session related Event Management. DataJoint Elements collectively standardize and automate data collection and analysis for neuroscience experiments. Each Element is a modular pipeline for data storage and processing with corresponding database tables that can be combined with other Elements to assemble a fully functional pipeline.</p> <p>Element Event features a DataJoint pipeline allowing for a standard approach for session level organization. The Element is composed of two schemas for storing data:</p> <ul> <li><code>event</code> - Manages event related data storage</li> </ul> <ul> <li><code>trial</code> - Manages trial related data storage</li> </ul> <p>Visit the Concepts page for more information on  session management and Element Session.  To get started with building your data pipeline visit the Tutorials page.</p> <p></p>"}, {"location": "changelog/", "title": "Changelog", "text": "<p>Observes Semantic Versioning standard and Keep a Changelog convention.</p>"}, {"location": "changelog/#020-2023-04-04", "title": "0.2.0 - 2023-04-04", "text": "<ul> <li>Update - <code>event.Event::event_start_time</code> datatype to decimal(10, 4)</li> </ul>"}, {"location": "changelog/#013-2022-11-02", "title": "0.1.3 - 2022-11-02", "text": "<ul> <li>Add - mkdocs deployment</li> </ul>"}, {"location": "changelog/#012-2022-08-26", "title": "0.1.2 - 2022-08-26", "text": "<ul> <li>Add - <code>attribute_blob</code> as <code>longblob</code> in the Attribute tables</li> <li>Add - support storing non-string data types</li> </ul>"}, {"location": "changelog/#011-2022-06-10", "title": "0.1.1 - 2022-06-10", "text": "<ul> <li>Add - NotImplementedError where Imported tables do not offer make function</li> <li>Add - get_trialized_alignment_event_times docstring specificity</li> <li>Update - Diagram to reflect design with trial.BlockTrial as imported</li> </ul>"}, {"location": "changelog/#010-2022-05-10", "title": "0.1.0 - 2022-05-10", "text": "<ul> <li>Add - Draft based on Cajal and Kavli Institute precursor projects</li> <li>Add - Table architecture</li> <li>Add - AlignmentEvent design to capture windows relative to an event</li> <li>Add - Black formatting into code base</li> </ul>"}, {"location": "citation/", "title": "Citation", "text": "<p>If your work uses this Element, please cite the following manuscript and Research Resource Identifier (RRID).</p> <ul> <li>Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D,   Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for   Neurophysiology. bioRxiv. 2021 Jan 1. doi: https://doi.org/10.1101/2021.03.30.437358</li> </ul> <ul> <li>DataJoint Elements (RRID:SCR_021894) -   Element Event (version 0.2.0)</li> </ul>"}, {"location": "concepts/", "title": "Concepts", "text": ""}, {"location": "concepts/#user-population", "title": "User Population", "text": "<p>Event- &amp; trial-based experiments have an extensive history in behavioral and cognitive psychology. Fundamentally, data collection is carved up in time according to some ontology. Researchers may repeat Trial conditions in some manner to improve statistical power when contrasting a feature of interest versus a neutral baseline. Neuroscientists, in particular, may be interested in the moments before and after an Event to look at neurophysiological factors that predict or are predicted by a subject's behavior. What may differ between research groups is the ontology used to carve up time.</p>"}, {"location": "concepts/#event-and-trial-time-locking-in-neurophysiology", "title": "Event and Trial Time Locking in Neurophysiology", "text": "<p>Event-related potentials (ERPs) are a form of measurement associated with electrophysiological neural signal activity. Typical neural signal patterns are continuous recordings lasting for the duration of a recording session. ERPs are short segmented chunks of neural signals that are time locked to particular events of experimental interest. These segmented chunks can then be stored across all occurences of a particular event and then can be averaged across all related trials containing the event type. Typical common events of interest include stimlus or trial onset and motor response onsets(button press, eye movements, lever licks). ERPs can ultimately be used to identify patterns of neural activity associated with the responses to the events of interest.</p>"}, {"location": "concepts/#terminology", "title": "Terminology", "text": "<p>The language below is tailored to the dependent variable in many neuroscience experiments, behavior. These concepts could be restated in reference to any modality.</p> <pre><code>|----------------------------------------------------------------------------|\n|-------------------------------- Session ---------------------------------|__\n|------------------------------- Recording ------------------------------|____\n|----- Block 1 -----|______|----- Block 2 -----|______|----- Block 3 -----|___\n| Trial 1 || Trial 2 |____| Trial 3 || Trial 4 |____| Trial 5 |____| Trial 6 |\n|_|e1|_|e2||e3|_|e4|__|e5|__|e6||e7||e8||e9||e10||e11|____|e12||e13|_________|\n|----------------------------------------------------------------------------|\n</code></pre> <ul> <li>A Session is period during which data is collected.</li> <li>A Recording is some source of data tied to a single modality (e.g., behavior). This may or may not fully capture the session depending on recording latencies or equipment malfunctions.</li> <li>Block and Trial are non-instantaneous subsets of Session whose traits often repeat across instances. These periods may be combined or contrasted in downstream analyses.</li> <li>Trials may occur within or extend to the intervals between Blocks.</li> <li>An Event (represented with e above) is an optionally instantaneous occurrence during a Session.</li> <li>Projects may differ in their need to record event duration (e.g., onset versus duration of subject behavior)</li> <li>Events may occur during other categories, or during continuously recorded behavior.</li> </ul>"}, {"location": "concepts/#key-partnerships", "title": "Key Partnerships", "text": "<p>DataJoint has partnered with the following teams to interview key members, and develop individualized pipelines. By comparing across use-cases, the DataJoint team has developed a highly adaptable workflow to meet most needs, and trialize analyses within an existing DataJoint workflow.</p> <ul> <li>International Brain Lab</li> <li>Mesoscale Activity Project (Janelia Research Campus/Baylor College of Medicine/New York University)</li> <li>Jerry Chen Lab (Boston University)</li> <li>University of Rochester-New York University-Harvard University U19</li> <li>Columbia University U19</li> <li>Tobias Rose Lab (University of Bonn)</li> </ul>"}, {"location": "concepts/#element-features", "title": "Element Features", "text": "<p>Features of Element Event include:</p> <ul> <li>Pairing of upstream sessions with behavioral recordings</li> <li>Multiple recorded attributes for phases of interest (see Attribute part tables for Block and Trial)</li> <li>Defining Trial and Event Types as lookup tables</li> <li>Optionally activating only the event schema for event-based recording, without Trial and Block phases.</li> <li>An AlignmentEvent table to define the window of interest relative to specific event types.</li> <li>Each level of the hierarchy (Block, Trial, Event) is designed to be optional to suit a given experiment's needs. For example usage, visit our Array Electrophysiology Workflow.</li> </ul>"}, {"location": "concepts/#element-architecture", "title": "Element Architecture", "text": "<p>Each node in the following diagram represents the analysis code in the workflow for Element Event and corresponding table in the database. Within the workflow, Element Event connects to upstream Element Session.</p> <p></p>"}, {"location": "concepts/#subject-schema-api-docs", "title": "<code>subject</code> schema (API docs)", "text": "<p>Although not required, most choose to connect the <code>Session</code> table to a <code>Subject</code> table.</p> Table Description Subject Basic information of the research subject."}, {"location": "concepts/#session-schema-api-docs", "title": "<code>session</code> schema (API docs)", "text": "Table Description Session Unique experimental session identifier."}, {"location": "concepts/#event-schema-api-docs", "title": "<code>event</code> schema (API docs)", "text": "<p>Tables related to event related data storage</p> Table Description EventType Unique event types and descriptions thereof. Behavior Recording Stores information from one recording session. Event Central table for storing all events from recording session. AlignmentEvent Stores events aligned to specific event type."}, {"location": "concepts/#trial-schema-api-docs", "title": "<code>trial</code> schema (API docs)", "text": "<p>Tables related to Session trials. </p> Table Description Block Stores information from custom experimental blocks. TrialType Unique trial types and descriptions thereof. Trial A central table for storing all trials from one recording session. BlockTrial Stores information on trials from experimental blocks. TrialEvent Stores information on trials associated with event type."}, {"location": "concepts/#element-development", "title": "Element Development", "text": "<p>In addition to the key projects listed above, the DataJoint team met with leaders from both Neurodata Without Borders and the Kepecs Lab, as these groups have both tackled the difficulty of developing ontologies that can cover all possible iterations of behavioral data collection. Our resulting structure is exemplified by the figure below.</p>"}, {"location": "concepts/#roadmap", "title": "Roadmap", "text": "<p>Further development of this Element is community driven. Upon user requests and based on guidance from the Scientific Steering Group we will add the following features to this Element:</p> <ul> <li>Automated import/export from/to common filetypes.</li> <li>Tools for synchronizing to reference clocks.</li> </ul>"}, {"location": "tutorials/", "title": "Tutorials", "text": "<p>Coming soon!</p>"}, {"location": "api/element_event/event/", "title": "event.py", "text": "<p>Events are linked to Trials</p>"}, {"location": "api/element_event/event/#element_event.event.activate", "title": "<code>activate(schema_name, *, create_schema=True, create_tables=True, linking_module=None)</code>", "text": "<p>Activate this schema.</p> <p>Parameters:</p> Name Type Description Default <code>schema_name</code> <code>str</code> <p>schema name on the database server</p> required <code>create_schema</code> <code>bool</code> <p>when True (default), create schema in the database if it                 does not yet exist.</p> <code>True</code> <code>create_tables</code> <code>str</code> <p>when True (default), create schema tables in the database                  if they do not yet exist.</p> <code>True</code> <code>linking_module</code> <code>str</code> <p>a module (or name) containing the required dependencies.</p> <code>None</code> <p>Dependencies:</p> Upstream tables <p>Session: parent table to BehaviorRecording, identifying a recording session. Project: the project with which experimental sessions are associated Experimenter: the experimenter(s) participating in a given session               To supply from element-lab add <code>Experimenter = lab.User</code>               to your <code>workflow/pipeline.py</code> before <code>session.activate()</code></p> Functions <p>get_experiment_root_data_dir(): Retrieve the root data director(y/ies) with                                 behavioral recordings (e.g., bpod files) for                                 all subject/sessions, returns a string for                                 full path to the root data directory. get_session_directory(session_key: dict): Retrieve the session directory                                         containing the recording(s) for a                                         given Session, returns a string for                                         full path to the session directory</p> Source code in <code>element_event/event.py</code> <pre><code>def activate(\n    schema_name, *, create_schema=True, create_tables=True, linking_module=None\n):\n\"\"\"Activate this schema.\n\n    Args:\n        schema_name (str): schema name on the database server\n        create_schema (bool): when True (default), create schema in the database if it\n                            does not yet exist.\n        create_tables (str): when True (default), create schema tables in the database\n                             if they do not yet exist.\n        linking_module (str): a module (or name) containing the required dependencies.\n\n    Dependencies:\n    Upstream tables:\n        Session: parent table to BehaviorRecording, identifying a recording session.\n        Project: the project with which experimental sessions are associated\n        Experimenter: the experimenter(s) participating in a given session\n                      To supply from element-lab add `Experimenter = lab.User`\n                      to your `workflow/pipeline.py` before `session.activate()`\n    Functions:\n        get_experiment_root_data_dir(): Retrieve the root data director(y/ies) with\n                                        behavioral recordings (e.g., bpod files) for\n                                        all subject/sessions, returns a string for\n                                        full path to the root data directory.\n        get_session_directory(session_key: dict): Retrieve the session directory\n                                                containing the recording(s) for a\n                                                given Session, returns a string for\n                                                full path to the session directory\n    \"\"\"\n\n    if isinstance(linking_module, str):\n        linking_module = importlib.import_module(linking_module)\n    assert inspect.ismodule(linking_module), (\n        \"The argument 'dependency' must\" + \" be a module or module name\"\n    )\n\n    schema.activate(\n        schema_name,\n        create_schema=create_schema,\n        create_tables=create_tables,\n        add_objects=linking_module.__dict__,\n    )\n</code></pre>"}, {"location": "api/element_event/event/#element_event.event.get_experiment_root_data_dir", "title": "<code>get_experiment_root_data_dir()</code>", "text": "<p>Pulls relevant func from parent namespace to specify root data dir(s).</p> <p>It is recommended that all paths in DataJoint Elements stored as relative paths, with respect to some user-configured \"root\" director(y/ies). The root(s) may vary between data modalities and user machines. Returns a full path string to behavioral root data directory or list of strings for possible root data directories.</p> <p>Returns:</p> Name Type Description <code>Paths</code> <code>list</code> <p>List of path(s) to root directories for event data</p> Source code in <code>element_event/event.py</code> <pre><code>def get_experiment_root_data_dir() -&gt; list:\n\"\"\"Pulls relevant func from parent namespace to specify root data dir(s).\n\n    It is recommended that all paths in DataJoint Elements stored as relative\n    paths, with respect to some user-configured \"root\" director(y/ies). The\n    root(s) may vary between data modalities and user machines. Returns a\n    full path string to behavioral root data directory or list of strings\n    for possible root data directories.\n\n    Returns:\n        Paths (list): List of path(s) to root directories for event data\n    \"\"\"\n    return _linking_module.get_experiment_root_data_dir()\n</code></pre>"}, {"location": "api/element_event/event/#element_event.event.get_session_directory", "title": "<code>get_session_directory(session_key)</code>", "text": "<p>Pulls relative function from parent namespace.</p> <p>Retrieves the session directory containing the recorded data for a given Session. Returns a string for full path to the session directory.</p> <p>Returns:</p> Name Type Description <code>Session_dir</code> <code>str</code> <p>Relative path to session directory</p> Source code in <code>element_event/event.py</code> <pre><code>def get_session_directory(session_key: dict) -&gt; str:\n\"\"\"Pulls relative function from parent namespace.\n\n    Retrieves the session directory containing the recorded data for a given\n    Session. Returns a string for full path to the session directory.\n\n    Returns:\n        Session_dir (str): Relative path to session directory\n    \"\"\"\n\n    return _linking_module.get_session_directory(session_key)\n</code></pre>"}, {"location": "api/element_event/event/#element_event.event.EventType", "title": "<code>EventType</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Set of unique events present within a recording session</p> <p>Attributes:</p> Name Type Description <code>event_type</code> <code> varchar(16) </code> <p>Unique event type.</p> <code>event_type_description</code> <code> varchar(256) </code> <p>Event type description.</p> Source code in <code>element_event/event.py</code> <pre><code>@schema\nclass EventType(dj.Lookup):\n\"\"\"Set of unique events present within a recording session\n\n    Attributes:\n        event_type ( varchar(16) ): Unique event type.\n        event_type_description ( varchar(256) ): Event type description.\n    \"\"\"\n\n    definition = \"\"\"\n    event_type                : varchar(16)\n    ---\n    event_type_description='' : varchar(256)\n    \"\"\"\n</code></pre>"}, {"location": "api/element_event/event/#element_event.event.BehaviorRecording", "title": "<code>BehaviorRecording</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Behavior Recordings</p> <p>Attributes:</p> Name Type Description <code>Session</code> <code>foreign key</code> <p>Session primary key.</p> <code>recording_start_time</code> <code>datetime</code> <p>Start time of recording.</p> <code>recording_duration</code> <code>float</code> <p>Duration of recording.</p> <code>recording_notes</code> <code> varchar(256) </code> <p>Optional recording related notes.</p> Source code in <code>element_event/event.py</code> <pre><code>@schema\nclass BehaviorRecording(dj.Manual):\n\"\"\"Behavior Recordings\n\n    Attributes:\n        Session (foreign key): Session primary key.\n        recording_start_time (datetime): Start time of recording.\n        recording_duration (float): Duration of recording.\n        recording_notes ( varchar(256) ): Optional recording related notes.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Session\n    ---\n    recording_start_time=null : datetime\n    recording_duration=null   : float\n    recording_notes=''     : varchar(256)\n    \"\"\"\n\n    class File(dj.Part):\n\"\"\"File IDs and paths associated with a behavior recording\n\n        Attributes:\n            BehaviorRecording (foreign key): Behavior recording primary key.\n            filepath ( varchar(64) ): file path of video, relative to root data dir.\n        \"\"\"\n\n        definition = \"\"\"\n        -&gt; master\n        filepath              : varchar(64)\n        \"\"\"\n</code></pre>"}, {"location": "api/element_event/event/#element_event.event.BehaviorRecording.File", "title": "<code>File</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>File IDs and paths associated with a behavior recording</p> <p>Attributes:</p> Name Type Description <code>BehaviorRecording</code> <code>foreign key</code> <p>Behavior recording primary key.</p> <code>filepath</code> <code> varchar(64) </code> <p>file path of video, relative to root data dir.</p> Source code in <code>element_event/event.py</code> <pre><code>class File(dj.Part):\n\"\"\"File IDs and paths associated with a behavior recording\n\n    Attributes:\n        BehaviorRecording (foreign key): Behavior recording primary key.\n        filepath ( varchar(64) ): file path of video, relative to root data dir.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; master\n    filepath              : varchar(64)\n    \"\"\"\n</code></pre>"}, {"location": "api/element_event/event/#element_event.event.Event", "title": "<code>Event</code>", "text": "<p>         Bases: <code>dj.Imported</code></p> <p>Automated table with event related information</p> <p>WRT: With respect to</p> <p>Attributes:</p> Name Type Description <code>BehaviorRecording</code> <code>foreign key</code> <p>Behavior recording primary key.</p> <code>EventType</code> <code>foreign key</code> <p>EventType primary key.</p> <code>event_start_time</code> <code>decimal(10, 4</code> <p>Time of event onset in seconds, WRT recording start.</p> <code>event_end_time</code> <code>float</code> <p>Optional. Seconds WRT recording start.</p> Source code in <code>element_event/event.py</code> <pre><code>@schema\nclass Event(dj.Imported):\n\"\"\"Automated table with event related information\n\n    WRT: With respect to\n\n    Attributes:\n        BehaviorRecording (foreign key): Behavior recording primary key.\n        EventType (foreign key): EventType primary key.\n        event_start_time (decimal(10, 4)): Time of event onset in seconds, WRT recording start.\n        event_end_time (float): Optional. Seconds WRT recording start.\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; BehaviorRecording\n    -&gt; EventType\n    event_start_time          : decimal(10, 4)  # (second) relative to recording start\n    ---\n    event_end_time=null       : float  # (second) relative to recording start\n    \"\"\"\n\n    def make(self, key):\n\"\"\"Populate based on unique entries in BehaviorRecording and EventType.\"\"\"\n        raise NotImplementedError(\"For `insert`, use `allow_direct_insert=True`\")\n</code></pre>"}, {"location": "api/element_event/event/#element_event.event.Event.make", "title": "<code>make(key)</code>", "text": "<p>Populate based on unique entries in BehaviorRecording and EventType.</p> Source code in <code>element_event/event.py</code> <pre><code>def make(self, key):\n\"\"\"Populate based on unique entries in BehaviorRecording and EventType.\"\"\"\n    raise NotImplementedError(\"For `insert`, use `allow_direct_insert=True`\")\n</code></pre>"}, {"location": "api/element_event/event/#element_event.event.AlignmentEvent", "title": "<code>AlignmentEvent</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Table designed to provide a mechanism for performing event-aligned analyses</p> <p>To use entries from trial.Trial, trial_start_time and trial_end_time must be entered in the Event table. WRT = With respect to</p> <p>Attributes     alignment_name ( varchar(32) ): Unique alignment name.     alignment_description ( varchar(1000) ): Optional. Longer description.     alignment_event_type (foreign key): Event type to align to.     alignment_time_shift (float): Seconds WRT alignment_event_type     start_event_type (foreign key): Event before alignment event type     start_time_shift (float): Seconds WRT start_event_type     end_event_type (foreign key): Event after alignment event type     end_time_shift (float): Seconds WRT end_event_type</p> Source code in <code>element_event/event.py</code> <pre><code>@schema\nclass AlignmentEvent(dj.Manual):\n\"\"\"Table designed to provide a mechanism for performing event-aligned analyses\n\n    To use entries from trial.Trial, trial_start_time and trial_end_time must be entered\n    in the Event table. WRT = With respect to\n\n    Attributes\n        alignment_name ( varchar(32) ): Unique alignment name.\n        alignment_description ( varchar(1000) ): Optional. Longer description.\n        alignment_event_type (foreign key): Event type to align to.\n        alignment_time_shift (float): Seconds WRT alignment_event_type\n        start_event_type (foreign key): Event before alignment event type\n        start_time_shift (float): Seconds WRT start_event_type\n        end_event_type (foreign key): Event after alignment event type\n        end_time_shift (float): Seconds WRT end_event_type\n\n    \"\"\"\n\n    definition = \"\"\" # time_shift is seconds to shift with respect to (WRT) a variable\n    alignment_name: varchar(32)\n    ---\n    alignment_description='': varchar(1000)  \n    -&gt; EventType.proj(alignment_event_type='event_type') # event type to align to\n    alignment_time_shift: float                      # (s) WRT alignment_event_type\n    -&gt; EventType.proj(start_event_type='event_type') # event before alignment_event_type\n    start_time_shift: float                          # (s) WRT start_event_type\n    -&gt; EventType.proj(end_event_type='event_type')   # event after alignment_event_type\n    end_time_shift: float                            # (s) WRT end_event_type\n    \"\"\"\n</code></pre>"}, {"location": "api/element_event/trial/", "title": "trial.py", "text": "<p>Events are linked to Trials</p>"}, {"location": "api/element_event/trial/#element_event.trial.activate", "title": "<code>activate(trial_schema_name, event_schema_name, *, create_schema=True, create_tables=True, linking_module=None)</code>", "text": "<p>Activate this schema.</p> <p>Parameters:</p> Name Type Description Default <code>trial_schema_name</code> <code>str</code> <p>schema name on the database server to activate the                      <code>trial</code> element</p> required <code>event_schema_name</code> <code>str</code> <p>schema name on the database server to activate the                      <code>event</code> element</p> required <code>create_schema</code> <code>bool</code> <p>when True (default), create schema in the database if it                 does not yet exist.</p> <code>True</code> <code>create_tables</code> <code>str</code> <p>when True (default), create schema tables in the database                  if they do not yet exist.</p> <code>True</code> <code>linking_module</code> <code>str</code> <p>a module (or name) containing the required dependencies                   to activate the <code>trial</code> element</p> <code>None</code> <p>Dependencies:</p> Upstream tables <p>Session: parent table to BehaviorRecording, identifying a recording session.</p> Functions <p>get_trialized_alignment_event_times(alignment_event_key: dict, trial_restriction:                                     dict): For the trials identified by                                     trial_restriction, identify recording times                                     with respect to a given alignment_event.                                     Returns pandas dataframe with trial_key,                                     start (recording time), event (recording time),                                     and end (recording time).</p> Source code in <code>element_event/trial.py</code> <pre><code>def activate(\n    trial_schema_name,\n    event_schema_name,\n    *,\n    create_schema=True,\n    create_tables=True,\n    linking_module=None,\n):\n\"\"\"Activate this schema.\n\n    Args:\n        trial_schema_name (str): schema name on the database server to activate the\n                                 `trial` element\n        event_schema_name (str): schema name on the database server to activate the\n                                 `event` element\n        create_schema (bool): when True (default), create schema in the database if it\n                            does not yet exist.\n        create_tables (str): when True (default), create schema tables in the database\n                             if they do not yet exist.\n        linking_module (str): a module (or name) containing the required dependencies\n                              to activate the `trial` element\n\n    Dependencies:\n    Upstream tables:\n        Session: parent table to BehaviorRecording, identifying a recording session.\n\n    Functions:\n        get_trialized_alignment_event_times(alignment_event_key: dict, trial_restriction:\n                                            dict): For the trials identified by\n                                            trial_restriction, identify recording times\n                                            with respect to a given alignment_event.\n                                            Returns pandas dataframe with trial_key,\n                                            start (recording time), event (recording time),\n                                            and end (recording time).\n    \"\"\"\n    if isinstance(linking_module, str):\n        linking_module = importlib.import_module(linking_module)\n    assert inspect.ismodule(linking_module), (\n        \"The argument 'dependency' must\" + \" be a module or module name\"\n    )\n\n    global _linking_module\n    _linking_module = linking_module\n\n    event.activate(\n        event_schema_name,\n        create_schema=create_schema,\n        create_tables=create_tables,\n        linking_module=_linking_module,\n    )\n\n    schema.activate(\n        trial_schema_name,\n        create_schema=create_schema,\n        create_tables=create_tables,\n        add_objects=_linking_module.__dict__,\n    )\n</code></pre>"}, {"location": "api/element_event/trial/#element_event.trial.Block", "title": "<code>Block</code>", "text": "<p>         Bases: <code>dj.Imported</code></p> <p>Set of experimental blocks within a recording session</p> <p>Attributes     event.BehaviorRecording (foreign key): event.BehaviorRecording primary key.     block_id (smallint): block number (1-based indexing)     block_start_time (float): Seconds relative to recording start     block_stop_time (float): Seconds relative to recording stop</p> Source code in <code>element_event/trial.py</code> <pre><code>@schema\nclass Block(dj.Imported):\n\"\"\"Set of experimental blocks within a recording session\n\n    Attributes\n        event.BehaviorRecording (foreign key): event.BehaviorRecording primary key.\n        block_id (smallint): block number (1-based indexing)\n        block_start_time (float): Seconds relative to recording start\n        block_stop_time (float): Seconds relative to recording stop\n    \"\"\"\n\n    definition = \"\"\" # Experimental blocks\n    -&gt; event.BehaviorRecording\n    block_id               : smallint # block number (1-based indexing)\n    ---\n    block_start_time       : float     # (s) relative to recording start\n    block_stop_time        : float     # (s) relative to recording stop\n    \"\"\"\n\n    class Attribute(dj.Part):\n\"\"\"Extra Block attributes to fully describe a block\n\n        Attributes:\n             Block (foreign key): Block table primary key. \n             attribute_name ( varchar(32) ): Name of block attribute\n             attribute_value ( varchar(2000) ): Optional. Block attribute value\n             attribute_blob (longblob): Optional. Block attribute numerical numerical data\n        \"\"\"\n\n        definition = \"\"\"  # Additional block attributes to fully describe a block\n        -&gt; master\n        attribute_name    : varchar(32)\n        ---\n        attribute_value='': varchar(2000)\n        attribute_blob=null: longblob\n        \"\"\"\n\n    def make(self, key):\n\"\"\"Populate each unique entry in event.BehaviorRecording\"\"\"\n        raise NotImplementedError(\"For `insert`, use `allow_direct_insert=True`\")\n</code></pre>"}, {"location": "api/element_event/trial/#element_event.trial.Block.Attribute", "title": "<code>Attribute</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Extra Block attributes to fully describe a block</p> <p>Attributes:</p> Name Type Description <code>Block</code> <code>foreign key</code> <p>Block table primary key. </p> <code>attribute_name</code> <code> varchar(32) </code> <p>Name of block attribute</p> <code>attribute_value</code> <code> varchar(2000) </code> <p>Optional. Block attribute value</p> <code>attribute_blob</code> <code>longblob</code> <p>Optional. Block attribute numerical numerical data</p> Source code in <code>element_event/trial.py</code> <pre><code>class Attribute(dj.Part):\n\"\"\"Extra Block attributes to fully describe a block\n\n    Attributes:\n         Block (foreign key): Block table primary key. \n         attribute_name ( varchar(32) ): Name of block attribute\n         attribute_value ( varchar(2000) ): Optional. Block attribute value\n         attribute_blob (longblob): Optional. Block attribute numerical numerical data\n    \"\"\"\n\n    definition = \"\"\"  # Additional block attributes to fully describe a block\n    -&gt; master\n    attribute_name    : varchar(32)\n    ---\n    attribute_value='': varchar(2000)\n    attribute_blob=null: longblob\n    \"\"\"\n</code></pre>"}, {"location": "api/element_event/trial/#element_event.trial.Block.make", "title": "<code>make(key)</code>", "text": "<p>Populate each unique entry in event.BehaviorRecording</p> Source code in <code>element_event/trial.py</code> <pre><code>def make(self, key):\n\"\"\"Populate each unique entry in event.BehaviorRecording\"\"\"\n    raise NotImplementedError(\"For `insert`, use `allow_direct_insert=True`\")\n</code></pre>"}, {"location": "api/element_event/trial/#element_event.trial.TrialType", "title": "<code>TrialType</code>", "text": "<p>         Bases: <code>dj.Lookup</code></p> <p>Set of unique trial types present within a recording session</p> <p>Attributes:</p> Name Type Description <code>trial_type</code> <code> varchar(16) </code> <p>Name of trial type</p> <code>trial_type_description</code> <code> varchar(256) </code> <p>Optional. Long Description.</p> Source code in <code>element_event/trial.py</code> <pre><code>@schema\nclass TrialType(dj.Lookup):\n\"\"\"Set of unique trial types present within a recording session\n\n    Attributes:\n        trial_type ( varchar(16) ): Name of trial type\n        trial_type_description ( varchar(256) ): Optional. Long Description.\n    \"\"\"\n\n    definition = \"\"\"\n    trial_type                : varchar(16)\n    ---\n    trial_type_description='' : varchar(256)\n    \"\"\"\n</code></pre>"}, {"location": "api/element_event/trial/#element_event.trial.Trial", "title": "<code>Trial</code>", "text": "<p>         Bases: <code>dj.Imported</code></p> <p>Set of all experimental trials from a behavioral recording</p> <p>Attributes:</p> Name Type Description <code>event.BehaviorRecording</code> <code>foreign key</code> <p>BehaviorRecording primary key</p> <code>trial_id</code> <code>smallint</code> <p>trial number (1-based indexing)</p> <code>TrialType</code> <code>foreign key</code> <p>Optional. TrialType primary key</p> <code>trial_start_time</code> <code>float</code> <p>Seconds relative to recording start</p> <code>trial_stop_time</code> <code>float</code> <p>Seconds relative to recording stop</p> Source code in <code>element_event/trial.py</code> <pre><code>@schema\nclass Trial(dj.Imported):\n\"\"\"Set of all experimental trials from a behavioral recording\n\n    Attributes:\n        event.BehaviorRecording (foreign key): BehaviorRecording primary key\n        trial_id (smallint): trial number (1-based indexing)\n        TrialType (foreign key): Optional. TrialType primary key\n        trial_start_time (float): Seconds relative to recording start\n        trial_stop_time (float): Seconds relative to recording stop\n    \"\"\"\n\n    definition = \"\"\"  # Experimental trials\n    -&gt; event.BehaviorRecording\n    trial_id            : smallint # trial number (1-based indexing)\n    ---\n    -&gt; [nullable] TrialType\n    trial_start_time    : float  # (second) relative to recording start\n    trial_stop_time     : float  # (second) relative to recording stop\n    \"\"\"\n\n    class Attribute(dj.Part):\n\"\"\"Extra trial attributes to fully describe a trial\n\n        Attributes:\n            Trial (foreign key): Trial table primary key.\n            attribute_name ( varchar(32) ): Name of trial attribute\n            attribute_value ( varchar(2000) ): Optional. Trial attribute value\n            attribute_blob (longblob): Optional. Trial attribute numerical data\n        \"\"\"\n\n        definition = \"\"\"  # Additional trial attributes to fully describe a trial\n        -&gt; master\n        attribute_name  : varchar(32)\n        ---\n        attribute_value='': varchar(2000)\n        attribute_blob=null: longblob\n        \"\"\"\n\n    def make(self, key):\n\"\"\"Populate for each unique entry in event.BehaviorRecording\"\"\"\n        raise NotImplementedError(\"For `insert`, use `allow_direct_insert=True`\")\n</code></pre>"}, {"location": "api/element_event/trial/#element_event.trial.Trial.Attribute", "title": "<code>Attribute</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Extra trial attributes to fully describe a trial</p> <p>Attributes:</p> Name Type Description <code>Trial</code> <code>foreign key</code> <p>Trial table primary key.</p> <code>attribute_name</code> <code> varchar(32) </code> <p>Name of trial attribute</p> <code>attribute_value</code> <code> varchar(2000) </code> <p>Optional. Trial attribute value</p> <code>attribute_blob</code> <code>longblob</code> <p>Optional. Trial attribute numerical data</p> Source code in <code>element_event/trial.py</code> <pre><code>class Attribute(dj.Part):\n\"\"\"Extra trial attributes to fully describe a trial\n\n    Attributes:\n        Trial (foreign key): Trial table primary key.\n        attribute_name ( varchar(32) ): Name of trial attribute\n        attribute_value ( varchar(2000) ): Optional. Trial attribute value\n        attribute_blob (longblob): Optional. Trial attribute numerical data\n    \"\"\"\n\n    definition = \"\"\"  # Additional trial attributes to fully describe a trial\n    -&gt; master\n    attribute_name  : varchar(32)\n    ---\n    attribute_value='': varchar(2000)\n    attribute_blob=null: longblob\n    \"\"\"\n</code></pre>"}, {"location": "api/element_event/trial/#element_event.trial.Trial.make", "title": "<code>make(key)</code>", "text": "<p>Populate for each unique entry in event.BehaviorRecording</p> Source code in <code>element_event/trial.py</code> <pre><code>def make(self, key):\n\"\"\"Populate for each unique entry in event.BehaviorRecording\"\"\"\n    raise NotImplementedError(\"For `insert`, use `allow_direct_insert=True`\")\n</code></pre>"}, {"location": "api/element_event/trial/#element_event.trial.BlockTrial", "title": "<code>BlockTrial</code>", "text": "<p>         Bases: <code>dj.Imported</code></p> <p>Set of trials associated with certain blocks</p> <p>Attributes:</p> Name Type Description <code>Block</code> <code>foreign key</code> <p>Block primary key</p> <code>Trial</code> <code>foreign key</code> <p>Trial primary key</p> Source code in <code>element_event/trial.py</code> <pre><code>@schema\nclass BlockTrial(dj.Imported):\n\"\"\"Set of trials associated with certain blocks\n\n    Attributes:\n        Block (foreign key): Block primary key\n        Trial (foreign key): Trial primary key\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Block\n    -&gt; Trial\n    \"\"\"\n\n    def make(self, key):\n\"\"\"Populate for each unique entry in Trial and Block\"\"\"\n        raise NotImplementedError(\"For `insert`, use `allow_direct_insert=True`\")\n</code></pre>"}, {"location": "api/element_event/trial/#element_event.trial.BlockTrial.make", "title": "<code>make(key)</code>", "text": "<p>Populate for each unique entry in Trial and Block</p> Source code in <code>element_event/trial.py</code> <pre><code>def make(self, key):\n\"\"\"Populate for each unique entry in Trial and Block\"\"\"\n    raise NotImplementedError(\"For `insert`, use `allow_direct_insert=True`\")\n</code></pre>"}, {"location": "api/element_event/trial/#element_event.trial.TrialEvent", "title": "<code>TrialEvent</code>", "text": "<p>         Bases: <code>dj.Imported</code></p> <p>Set of trials associated with certain events</p> <p>Attributes:</p> Name Type Description <code>Block</code> <code>foreign key</code> <p>Block primary key</p> <code>event.Event</code> <code>foreign key</code> <p>event.Event primary key</p> Source code in <code>element_event/trial.py</code> <pre><code>@schema\nclass TrialEvent(dj.Imported):\n\"\"\"Set of trials associated with certain events\n\n    Attributes:\n        Block (foreign key): Block primary key\n        event.Event (foreign key): event.Event primary key\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Trial\n    -&gt; event.Event\n    \"\"\"\n\n    def make(self, key):\n\"\"\"Populate for each unique entry in Trial and event.Event\"\"\"\n        raise NotImplementedError(\"For `insert`, use `allow_direct_insert=True`\")\n</code></pre>"}, {"location": "api/element_event/trial/#element_event.trial.TrialEvent.make", "title": "<code>make(key)</code>", "text": "<p>Populate for each unique entry in Trial and event.Event</p> Source code in <code>element_event/trial.py</code> <pre><code>def make(self, key):\n\"\"\"Populate for each unique entry in Trial and event.Event\"\"\"\n    raise NotImplementedError(\"For `insert`, use `allow_direct_insert=True`\")\n</code></pre>"}, {"location": "api/element_event/trial/#element_event.trial.get_trialized_alignment_event_times", "title": "<code>get_trialized_alignment_event_times(alignment_event_key, trial_restriction)</code>", "text": "<p>For the trials in trial_restriction, identify times WRT a given alignment_event.</p> <p>WRT = With respect to</p> <p>Parameters:</p> Name Type Description Default <code>alignment_event_key</code> <code>dict</code> <p>key including information from event.AlignmentEvent</p> required <code>trial_restriction</code> <code>dict</code> <p>set or subset of trials from trial.Trial</p> required <p>Returns:</p> Name Type Description <code>dataset</code> <code>pandas</code> <p>Dataframe with each of the items listed below.</p> Dataset <p>trial_key (dict): key identifying a single trial </p> <p>start (float): recording time (s) of the beginning of an alignment window </p> <p>event (float): recording time (s) of an alignment event within the trial.     If multiple events within a trial, select the last one</p> <p>end  (float): recording time (s) of the end of an alignment window</p> Source code in <code>element_event/trial.py</code> <pre><code>def get_trialized_alignment_event_times(alignment_event_key, trial_restriction):\n\"\"\"For the trials in trial_restriction, identify times WRT a given alignment_event.\n\n    WRT = With respect to\n\n    Args:\n        alignment_event_key (dict): key including information from event.AlignmentEvent\n        trial_restriction (dict): set or subset of trials from trial.Trial\n\n    Returns:\n        dataset (pandas): Dataframe with each of the items listed below.\n\n    Dataset:\n        trial_key (dict): key identifying a single trial \\n\n        start (float): recording time (s) of the beginning of an alignment window \\n\n        event (float): recording time (s) of an alignment event within the trial.\n            If multiple events within a trial, select the last one\\n\n        end  (float): recording time (s) of the end of an alignment window\n    \"\"\"\n\n    import pandas as pd\n\n    session_key = (_linking_module.Session &amp; trial_restriction).fetch1(\"KEY\")\n    trial_keys, trial_starts, trial_ends = (Trial ^ trial_restriction).fetch(\n        \"KEY\", \"trial_start_time\", \"trial_stop_time\", order_by=\"trial_id\"\n    )\n    alignment_spec = (event.AlignmentEvent &amp; alignment_event_key).fetch1()\n\n    alignment_times = []\n    for trial_key, trial_start, trial_stop in zip(trial_keys, trial_starts, trial_ends):\n        alignment_event_time = (\n            event.Event\n            &amp; session_key\n            &amp; {\"event_type\": alignment_spec[\"alignment_event_type\"]}\n            &amp; f\"event_start_time BETWEEN {trial_start} AND {trial_stop}\"\n        )\n        if alignment_event_time:\n            # if  multiple alignment events, pick the last one in the trial\n            alignment_event_time = alignment_event_time.fetch(\n                \"event_start_time\", order_by=\"event_start_time DESC\", limit=1\n            )[0]\n        else:\n            alignment_times.append(\n                {\"trial_key\": trial_key, \"start\": None, \"event\": None, \"end\": None}\n            )\n            continue\n\n        alignment_start_time = (\n            event.Event\n            &amp; session_key\n            &amp; {\"event_type\": alignment_spec[\"start_event_type\"]}\n            &amp; f\"event_start_time &lt; {alignment_event_time}\"\n        )\n        if alignment_start_time:\n            # if multiple start events, pick most immediate prior alignment event\n            alignment_start_time = alignment_start_time.fetch(\n                \"event_start_time\", order_by=\"event_start_time DESC\", limit=1\n            )[0]\n            alignment_start_time = max(alignment_start_time, trial_start)\n        else:\n            alignment_start_time = trial_start\n\n        alignment_end_time = (\n            event.Event\n            &amp; session_key\n            &amp; {\"event_type\": alignment_spec[\"end_event_type\"]}\n            &amp; f\"event_start_time &gt; {alignment_event_time}\"\n        )\n        if alignment_end_time:\n            # if multiple of such start event, pick most immediate after alignment event\n            alignment_end_time = alignment_end_time.fetch(\n                \"event_start_time\", order_by=\"event_start_time\", limit=1\n            )[0]\n            alignment_end_time = min(alignment_end_time, trial_stop)\n        else:\n            alignment_end_time = trial_stop\n\n        alignment_start_time += alignment_spec[\"start_time_shift\"]\n        alignment_event_time += alignment_spec[\"alignment_time_shift\"]\n        alignment_end_time += alignment_spec[\"end_time_shift\"]\n\n        alignment_times.append(\n            {\n                \"trial_key\": trial_key,\n                \"start\": alignment_start_time,\n                \"event\": alignment_event_time,\n                \"end\": alignment_end_time,\n            }\n        )\n\n    return pd.DataFrame(alignment_times)\n</code></pre>"}, {"location": "api/element_event/version/", "title": "version.py", "text": "<p>Package metadata.</p>"}]}